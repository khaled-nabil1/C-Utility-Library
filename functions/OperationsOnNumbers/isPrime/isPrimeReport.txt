### **Title and Overview**  
**Program Name**: Prime Number Checker  
**Purpose**: This program determines whether a given integer is a prime number.

---

### **Features**  
- Checks if a number is prime using an optimized approach.  
- Efficiently handles large numbers by reducing unnecessary computations.

---

### **Inputs and Outputs**  
- **Inputs**:  
  - A single integer (`num`) as input.  
  - Assumes `num` is greater than 1.

- **Outputs**:  
  - Returns `true` if the number is a prime number.  
  - Returns `false` if the number is not a prime number.

---

### **Workflow**  
1. Initialize a variable (`i`) to 2, the smallest prime number.  
2. Use a `while` loop to check divisors up to the square root of the input number (`i * i <= num`).  
3. For each divisor `i`:  
   - If `num % i == 0`, return `false` (indicating the number is not prime).  
   - Otherwise, increment `i` and continue checking.  
4. If no divisors are found, return `true` (indicating the number is prime).

---

### **Strengths and Limitations**  
- **Strengths**:  
  - Uses an optimized algorithm by limiting the divisor range to the square root of the input number.  
  - Efficient for moderately large numbers.  


### **Code Summary**  
- **Programming Language**: C  
- **Tools or Libraries Used**:  
  - `<stdbool.h>` for the `bool` data type and `true`/`false` values.  
  - Relies on standard arithmetic operations and a loop-based approach for primality testing.  

---
