### **Title and Overview**  
**Program Name**: Armstrong Number Checker  
**Purpose**: This program checks whether a given integer is an Armstrong number.

---

### **Features**  
1. Determines if an integer is an Armstrong number (also known as a narcissistic number).  
2. Handles numbers with multiple digits by calculating the sum of each digit raised to the power of the total number of digits.

---

### **Inputs and Outputs**  
1. **Inputs**:  
   - A single integer (`num`), assumed to be non-negative.  
2. **Outputs**:  
   - Returns `true` if the number is an Armstrong number.  
   - Returns `false` if the number is not an Armstrong number.

---

### **Workflow**  
1. Calculate the number of digits in the input number (`num`):  
   - Use a `while` loop to divide the number by 10 repeatedly and count the digits (`num_of_digits`).  
2. Store the original number (`num`) in `n_copy`.  
3. For each digit of the number:  
   - Extract the digit using modulo operation (`digit = n_copy % 10`).  
   - Raise the digit to the power of `num_of_digits` using a `for` loop.  
   - Add the result to the sum (`S`).  
4. After processing all digits, check if the sum (`S`) equals the original number (`num`).  
   - Return `true` if they are equal, otherwise return `false`.

---

### **Strengths and Limitations**  
1. **Strengths**:  
   - Correctly identifies Armstrong numbers by calculating the sum of digits raised to the power of the number of digits.  
   - Works for any integer with multiple digits.  
2. **Limitations**:  
   - Assumes non-negative integer input.  
   - The algorithm may be inefficient for large numbers due to repeated power calculations.

---

### **Code Summary**  
1. **Programming Language**: C  
2. **Tools or Libraries Used**:  
   - `<stdbool.h>` for the `bool` data type and `true`/`false` values.  

---
